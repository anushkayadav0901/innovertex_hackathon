{"version":3,"file":"chunk-B9dGnliu.js","sources":["../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js"],"sourcesContent":["/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createBrowserHistory","options","getLocation","createHref","validateLocation","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","index","getIndex","replaceState","state","idx","handlePop","nextIndex","delta","location","push","to","Push","createLocation","historyState","getHistoryState","url","pushState","error","DOMException","name","replace","Replace","createURL","base","origin","href","createPath","invariant","URL","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","pathname","search","hash","go","n","getUrlBasedHistory","usr","value","message","warning","cond","e","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","String","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","ErrorResponseImpl","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","router","dataRoutes","dataStrategyImpl","dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialMatchesIsFOW","initialErrors","getInternalRouterError","getShortCircuitMatches","checkFogOfWar","active","m","lazy","loader","loaderData","errors","findIndex","shouldLoadRouteOnHydration","fogOfWar","pendingNavigationController","unblockBlockerHistoryUpdate","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","has","subscriber","viewTransitionOpts","flushSync","delete","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","priorPaths","get","currentLocation","nextLocation","toPaths","add","getSavedScrollPosition","async","startNavigation","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","initialHydration","isHashChangeOnly","submission","notFoundMatches","handleNavigational404","AbortController","pendingActionResult","request","createClientSideRequest","signal","pendingError","findNearestBoundary","type","actionResult","isFogOfWar","interruptActiveLoads","getSubmittingNavigation","discoverResult","discoverRoutes","shortCircuited","boundaryId","partialMatches","actionMatch","getTargetMatch","callDataStrategy","aborted","method","routeId","isRedirectResult","normalizeRedirectLocation","response","headers","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","handleAction","getLoadingNavigation","updatedMatches","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","getActionDataForCommit","updates","rf","revalidatingFetcher","getLoadingFetcher","getUpdatedRevalidatingFetchers","abortFetcher","controller","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","results","dataResults","requestContext","loadRouteDefinitionsPromises","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","loadLazyRouteModule","dsMatches","loadRoutePromise","shouldLoad","resolve","handlerOverride","staticContext","onReject","runHandler","handler","reject","abortPromise","Promise","r","actualHandler","ctx","context","handlerPromise","race","handlerError","all","catch","callLoaderOrAction","callDataStrategyImpl","entries","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","acc","resolveNavigationDeferredResults","resolveFetcherDeferredResults","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","handle","convertRouteMatchToUiMatch","y","isNonHMR","localManifest","patch","patchRoutesImpl","newMatches","newPartialMatches","initialize","nextHistoryUpdatePromise","then","_window","transitions","sessionPositions","sessionStorage","getItem","parse","isArray","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","viewTransition","fetch","requestMatches","detectAndHandle405Error","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","append","qs","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","_ref3","convertFormDataToSearchParams","convertSearchParamsToFormData","getLoaderMatchesUntilBoundary","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","statusCode","shouldSkipRevalidation","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","hydrate","currentPath","loaderMatch","arg","routeChoice","_childrenToPatch","childrenToPatch","newRoute","existingRoute","isSameRoute","aChild","_existingRoute$childr","bChild","_ref4","dataStrategyResult","isResponse","contentType","_result$init3","_result$init4","_result$init","_result$init2","_result$init5","_result$init6","_result$init7","_result$init8","isDataWithResponseInit","Headers","deferred","resolveData","isDeferredData","trimmedMatches","normalizedLocation","protocol","isSameBasename","Request","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp5","errorMessage","isRevalidatingLoader","unwrap","unwrappedData","DataRouterContext","React.createContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","React.useContext","useLocation","UNSAFE_invariant","useIsomorphicLayoutEffect","cb","static","React.useLayoutEffect","useNavigate","useDataRouterContext","DataRouterHook","UseNavigateStable","useCurrentRouteId","activeRef","React.useRef","React.useCallback","useNavigateStable","dataRouterContext","navigator","routePathnamesJson","UNSAFE_getResolveToMatches","useNavigateUnstable","OutletContext","useParams","routeMatch","useResolvedPath","React.useMemo","useRoutesImpl","dataRouterState","parentMatches","parentParams","parentPathnameBase","parentSegments","renderedMatches","_dataRouterState","_future","errorIndex","min","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","needsToRunLoader","reduceRight","shouldRenderHydrateFallback","errorElement","defaultErrorElement","alreadyWarned$1","getChildren","Component","React.createElement","element","RenderedRoute","routeContext","ErrorBoundary","RenderErrorBoundary","component","_renderMatches","DefaultErrorComponent","_state$errors","useDataRouterState","DataRouterStateHook","UseRouteError","useRouteError","stack","preStyles","padding","backgroundColor","React.Fragment","style","fontStyle","React.Component","props","super","getDerivedStateFromError","getDerivedStateFromProps","componentDidCatch","errorInfo","render","Provider","_deepestRenderedBoundaryId","hookName","useRouteContext","thisRoute","Navigate","isStatic","jsonPath","React.useEffect","Outlet","useOutlet","Router","_ref5","basenameProp","locationProp","navigationType","staticProp","navigationContext","locationContext","trailingPathname","_objectWithoutPropertiesLoose","excluded","sourceKeys","_excluded","_excluded2","__reactRouterVersion","createBrowserRouter","parseHydrationData","__staticRouterHydrationData","deserializeErrors","serialized","val","__type","UNSAFE_ErrorResponseImpl","__subType","ErrorConstructor","ViewTransitionContext","isTransitioning","FetchersContext","startTransitionImpl","React","flushSyncImpl","ReactDOM","flushSyncSafe","Deferred","promise","reason","RouterProvider","fallbackElement","setStateImpl","React.useState","pendingState","setPendingState","vtContext","setVtContext","renderDfd","setRenderDfd","transition","setTransition","interruption","setInterruption","fetcherData","v7_startTransition","optInStartTransition","startTransitionSafe","setState","isViewTransitionUnavailable","startViewTransition","skipTransition","t","finished","finally","renderPromise","routerFuture","renderFuture","UNSAFE_logV6DeprecationWarnings","UNSAFE_DataRouterContext","UNSAFE_DataRouterStateContext","MemoizedDataRoutes","React.memo","DataRoutes","UNSAFE_useRoutesImpl","Link","React.forwardRef","_ref7","ref","absoluteHref","onClick","reloadDocument","UNSAFE_NavigationContext","isExternal","targetUrl","joinedPathname","useHref","internalOnClick","replaceProp","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","useLinkClickHandler","defaultPrevented","NavLink","_ref8","ariaCurrentProp","className","classNameProp","styleProp","routerState","useViewTransitionState","nextPath","nextLocationPathname","endSlashPosition","isActive","isPending","renderProps","ariaCurrent"],"mappings":"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","x_google_ignoreList":[0,1,2]}